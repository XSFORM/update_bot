# -*- coding: utf-8 -*-
import os
import subprocess
import time
from datetime import date, datetime, timedelta
from typing import Optional, Tuple, List
import glob
import json
from OpenSSL import crypto
import pytz

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
)

from config import TOKEN, ADMIN_ID

# ---------------- –í–µ—Ä—Å–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–≤—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥) ----------------
BOT_VERSION = "2025-09-02-fixed1"
UPDATE_SOURCE_URL = "https://raw.githubusercontent.com/XSFORM/update_bot/main/openvpn_monitor_bot.py"

def build_update_commands():
    short_cmd = f"curl -L -o /root/monitor_bot/openvpn_monitor_bot.py {UPDATE_SOURCE_URL} && systemctl restart vpn_bot.service"
    safe_cmd = (
        "cd /root/monitor_bot && "
        "cp openvpn_monitor_bot.py openvpn_monitor_bot.py.bak_$(date +%Y%m%d_%H%M%S) && "
        f"curl -L -o openvpn_monitor_bot.py {UPDATE_SOURCE_URL} && "
        "python3 -m py_compile openvpn_monitor_bot.py && "
        "systemctl restart vpn_bot.service"
    )
    return short_cmd, safe_cmd

async def show_update_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    short_cmd, safe_cmd = build_update_commands()
    text = (
        f"<b>–ö–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–µ—Ä—Å–∏—è {BOT_VERSION})</b>\n\n"
        "–ü—Ä–æ—Å—Ç–∞—è:\n<code>" + short_cmd + "</code>\n\n"
        "–° –±—ç–∫–∞–ø–æ–º –∏ –ø—Ä–æ–≤–µ—Ä–∫–æ–π:\n<code>" + safe_cmd + "</code>\n\n"
        "–û—Ç–∫–∞—Ç (–ø—Ä–∏–º–µ—Ä):\n<code>cp /root/monitor_bot/openvpn_monitor_bot.py.bak_YYYYMMDD_HHMMSS "
        "/root/monitor_bot/openvpn_monitor_bot.py && systemctl restart vpn_bot.service</code>"
    )
    await update.message.reply_text(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=get_main_keyboard())

async def send_update_cmd_via_button(chat_id: int, bot):
    short_cmd, safe_cmd = build_update_commands()
    text = (
        f"<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞</b>\n–í–µ—Ä—Å–∏—è: <code>{BOT_VERSION}</code>\n\n"
        "–ü—Ä–æ—Å—Ç–∞—è:\n<code>" + short_cmd + "</code>\n\n"
        "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è (—Å –±—ç–∫–∞–ø–æ–º):\n<code>" + safe_cmd + "</code>"
    )
    await bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML", disable_web_page_preview=True)

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø—É—Ç–µ–π ---
KEYS_DIR = "/root"
OPENVPN_DIR = "/etc/openvpn"
EASYRSA_DIR = "/etc/openvpn/easy-rsa"
IPTABLES_DIR = "/etc/iptables"
BACKUP_DIR = "/root"
STATUS_LOG = "/var/log/openvpn/status.log"
CCD_DIR = "/etc/openvpn/ccd"

NOTIFY_FILE = "/root/monitor_bot/notify.flag"
TM_TZ = pytz.timezone("Asia/Ashgabat")
MGMT_SOCKET = "/var/run/openvpn.sock"

# --- –ü–æ—Ä–æ–≥ —Ç—Ä–µ–≤–æ–≥–∏ –∏ –∞–Ω—Ç–∏—Å–ø–∞–º ---
MIN_ONLINE_ALERT = 15
ALERT_INTERVAL_SEC = 300
last_alert_time = 0
clients_last_online = set()

# --- –£—á—ë—Ç —Ç—Ä–∞—Ñ–∏–∫–∞ ---
TRAFFIC_DB_PATH = "/root/monitor_bot/traffic_usage.json"
traffic_usage = {}
_last_session_state = {}
_last_traffic_save_time = 0
TRAFFIC_SAVE_INTERVAL = 60

# --- –°—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –æ—Ç—á—ë—Ç–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ ---
RX_ARROW = "üîª"   # server received from client (upload –∫–ª–∏–µ–Ω—Ç–∞)
TX_ARROW = "üî∫"   # server sent to client (download –∫–ª–∏–µ–Ω—Ç–∞)
ARROWS_SPACING = ""

# ================== –ë–∞–∑–æ–≤—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ==================

def get_cert_expiry_info():
    cert_dir = f"{EASYRSA_DIR}/pki/issued"
    cert_files = glob.glob(f"{cert_dir}/*.crt")
    result = []
    for cert_file in cert_files:
        client_name = os.path.basename(cert_file).replace(".crt", "")
        with open(cert_file, "rb") as f:
            cert_data = f.read()
            cert = crypto.load_certificate(crypto.FILETYPE_PEM, cert_data)
            not_after = cert.get_notAfter().decode("ascii")
            expiry_date = datetime.strptime(not_after, "%Y%m%d%H%M%SZ")
            days_left = (expiry_date - datetime.utcnow()).days
            result.append((client_name, days_left, expiry_date))
    return result

def format_clients_by_certs():
    cert_dir = f"{EASYRSA_DIR}/pki/issued/"
    certs = [f for f in os.listdir(cert_dir) if f.endswith(".crt")]
    result = "<b>–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–ø–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º):</b>\n\n"
    idx = 1
    for f in sorted(certs):
        client_name = f[:-4]
        if client_name.startswith("server_"):
            continue
        result += f"{idx}. <b>{client_name}</b>\n"
        idx += 1
    if idx == 1:
        result += "–ù–µ—Ç –≤—ã–¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤."
    return result

def format_all_keys_with_status_compact(keys_dir=KEYS_DIR, clients_online=set(), clients=[], tunnel_ips={}, ipp_map={}):
    files = [f for f in os.listdir(keys_dir) if f.endswith(".ovpn")]
    result = "<b>–°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–ª—é—á–µ–π:</b>\n"
    for idx, f in enumerate(sorted(files), 1):
        key_name = f[:-5]
        status = "üü¢" if key_name in clients_online and not is_client_ccd_disabled(key_name) else "üî¥"
        if is_client_ccd_disabled(key_name):
            status = "‚õî"
        tunnel_ip = tunnel_ips.get(key_name) or ipp_map.get(key_name, "–ù/–î")
        client_info = next((c for c in clients if c['name'] == key_name), None)
        real_ip = client_info.get('ip', '–ù/–î') if client_info and key_name in clients_online and not is_client_ccd_disabled(key_name) else "–ù/–î"
        result += f"{idx}. | {status} | <b>{key_name}</b> | <code>{tunnel_ip}</code> | <code>{real_ip}</code>\n"
    if not files:
        result += "–ù–µ—Ç –∫–ª—é—á–µ–π."
    return result

def parse_openvpn_status(status_path=STATUS_LOG):
    clients = []
    online_names = set()
    tunnel_ips = {}
    try:
        with open(status_path, "r") as f:
            lines = f.readlines()
        client_list_section = False
        routing_table_section = False
        for line in lines:
            line = line.strip()
            if line.startswith("OpenVPN CLIENT LIST"):
                client_list_section = True
                continue
            if client_list_section and line.startswith("Common Name,Real Address"):
                continue
            if client_list_section and not line:
                client_list_section = False
                continue
            if client_list_section and "," in line:
                parts = line.split(",")
                if len(parts) >= 5:
                    common_name = parts[0]
                    real_addr = parts[1]
                    bytes_recv = parts[2]
                    bytes_sent = parts[3]
                    connected_since = parts[4]
                    clients.append({
                        "name": common_name,
                        "ip": real_addr.split(":")[0],
                        "port": real_addr.split(":")[1] if ":" in real_addr else "",
                        "bytes_recv": bytes_recv,
                        "bytes_sent": bytes_sent,
                        "connected_since": connected_since,
                    })
            if line.startswith("ROUTING TABLE"):
                routing_table_section = True
                continue
            if routing_table_section and line.startswith("Virtual Address,Common Name"):
                continue
            if routing_table_section and not line:
                routing_table_section = False
                continue
            if routing_table_section and "," in line:
                parts = line.split(",")
                if len(parts) >= 2:
                    tunnel_ip = parts[0]
                    cname = parts[1]
                    tunnel_ips[cname] = tunnel_ip
                    online_names.add(cname)
    except Exception as e:
        print(f"[parse_openvpn_status] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è status.log: {e}")
    return clients, online_names, tunnel_ips

def read_ipp_file(ipp_file="/etc/openvpn/ipp.txt"):
    ipp_map = {}
    try:
        with open(ipp_file, "r") as f:
            for line in f:
                if ',' in line:
                    name, ip = line.strip().split(',', 1)
                    ipp_map[name] = ip
    except Exception:
        pass
    return ipp_map

def bytes_to_mb(b):
    try:
        return f"{int(b)/1024/1024:.2f} MB"
    except:
        return "0 MB"

def format_tm_time(dt_str):
    try:
        dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
        dt = pytz.utc.localize(dt).astimezone(TM_TZ)
        return dt.strftime("%Y-%m-%d %H:%M:%S")
    except Exception:
        return dt_str

def split_message(text, max_length=4000):
    lines = text.split('\n')
    messages = []
    current = ""
    for line in lines:
        if len(current) + len(line) + 1 < max_length:
            current += line + '\n'
        else:
            messages.append(current)
            current = line + '\n'
    if current:
        messages.append(current)
    return messages

def get_ovpn_files():
    return [f for f in os.listdir(KEYS_DIR) if f.endswith(".ovpn")]

def is_client_ccd_disabled(client_name):
    ccd_path = os.path.join(CCD_DIR, client_name)
    if not os.path.exists(ccd_path):
        return False
    try:
        with open(ccd_path, "r") as f:
            content = f.read().strip()
        return "disable" in content
    except Exception:
        return False

def block_client_ccd(client_name):
    with open(os.path.join(CCD_DIR, client_name), "w") as f:
        f.write("disable\n")

def unblock_client_ccd(client_name):
    p = os.path.join(CCD_DIR, client_name)
    if os.path.exists(p):
        os.remove(p)

def kill_openvpn_session(client_name):
    if os.path.exists(MGMT_SOCKET):
        try:
            subprocess.run(f'echo "kill {client_name}" | nc -U {MGMT_SOCKET}', shell=True)
            return True
        except Exception as e:
            print(f"[kill_openvpn_session] –û—à–∏–±–∫–∞: {e}")
    return False

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞ ---
def format_bytes_gb(b):
    try:
        return f"{int(b)/1024/1024/1024:.2f} GB"
    except:
        return "0.00 GB"

def format_gb(v_bytes):
    try:
        return f"{v_bytes/1024/1024/1024:.2f} GB"
    except Exception:
        return "0.00 GB"

# ================== –¢—Ä–∞—Ñ–∏–∫ ==================

def load_traffic_db():
    global traffic_usage
    try:
        if os.path.exists(TRAFFIC_DB_PATH):
            with open(TRAFFIC_DB_PATH, "r") as f:
                raw = json.load(f)
            migrated = {}
            changed = False
            for k, v in raw.items():
                if isinstance(v, dict) and 'rx' in v and 'tx' in v:
                    migrated[k] = {'rx': int(v.get('rx', 0)), 'tx': int(v.get('tx', 0))}
                elif isinstance(v, int):
                    migrated[k] = {'rx': v, 'tx': 0}
                    changed = True
                else:
                    migrated[k] = {'rx': 0, 'tx': 0}
                    changed = True
            traffic_usage = migrated
            if changed:
                save_traffic_db(force=True)
        else:
            traffic_usage = {}
    except Exception as e:
        print(f"[traffic] load error: {e}")
        traffic_usage = {}

def save_traffic_db(force=False):
    global _last_traffic_save_time
    now = time.time()
    if not force and now - _last_traffic_save_time < TRAFFIC_SAVE_INTERVAL:
        return
    try:
        tmp = TRAFFIC_DB_PATH + ".tmp"
        with open(tmp, "w") as f:
            json.dump(traffic_usage, f)
        os.replace(tmp, TRAFFIC_DB_PATH)
        _last_traffic_save_time = now
    except Exception as e:
        print(f"[traffic] save error: {e}")

def build_traffic_report():
    if not traffic_usage:
        return "<b>–¢—Ä–∞—Ñ–∏–∫:</b>\n–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    items = sorted(
        traffic_usage.items(),
        key=lambda x: (x[1]['rx'] + x[1]['tx']) if isinstance(x[1], dict) else x[1],
        reverse=True
    )
    lines = ["<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>"]
    for name, val in items:
        if isinstance(val, dict):
            rx = val.get('rx', 0)
            tx = val.get('tx', 0)
            total = rx + tx
            lines.append(
                f"‚Ä¢ <b>{name}</b>: {RX_ARROW}{ARROWS_SPACING}{format_gb(rx)} "
                f"{TX_ARROW}{ARROWS_SPACING}{format_gb(tx)} (= --{format_gb(total)}--)"
            )
        else:
            lines.append(f"‚Ä¢ <b>{name}</b>: Œ£ --{format_gb(val)}--")
    return "\n".join(lines)

def update_traffic_from_status(clients):
    global traffic_usage, _last_session_state
    changed = False
    for c in clients:
        name = c['name']
        try:
            recv = int(c.get('bytes_recv', 0))
            sent = int(c.get('bytes_sent', 0))
        except:
            continue
        connected_since = c.get('connected_since', '')
        prev = _last_session_state.get(name)

        if name not in traffic_usage:
            traffic_usage[name] = {'rx': 0, 'tx': 0}

        if prev is None or prev['connected_since'] != connected_since:
            _last_session_state[name] = {
                'connected_since': connected_since,
                'rx': recv,
                'tx': sent
            }
            continue

        delta_rx = recv - prev['rx']
        delta_tx = sent - prev['tx']

        if delta_rx > 0:
            traffic_usage[name]['rx'] += delta_rx
            prev['rx'] = recv
            changed = True
        else:
            prev['rx'] = recv

        if delta_tx > 0:
            traffic_usage[name]['tx'] += delta_tx
            prev['tx'] = sent
            changed = True
        else:
            prev['tx'] = sent

    if changed:
        save_traffic_db()

def clear_traffic_stats():
    """–ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞ + baseline (–¥–µ–ª–∞–µ—Ç—Å—è –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞)."""
    global traffic_usage, _last_session_state
    try:
        if os.path.exists(TRAFFIC_DB_PATH):
            ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
            subprocess.run(f"cp {TRAFFIC_DB_PATH} {TRAFFIC_DB_PATH}.bak_{ts}", shell=True)
    except Exception as e:
        print(f"[traffic] backup before clear error: {e}")
    traffic_usage = {}
    _last_session_state = {}
    save_traffic_db(force=True)

# ================== REMOTE (–º–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ remote) ==================
### REMOTE UPDATE START (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ regex, —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å Python 3.9)

def parse_new_remote(input_str: str) -> Tuple[Optional[str], Optional[int]]:
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞:
      host
      host:port
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (host, port_or_None).
    """
    s = input_str.strip()
    if not s:
        return None, None
    if ':' in s:
        host, port_part = s.rsplit(':', 1)
        host = host.strip()
        try:
            port = int(port_part)
            if 1 <= port <= 65535:
                return host, port
        except:
            return host, None
        return host, None
    return s, None

def replace_remote_line(line: str, new_host: str, new_port: Optional[int]):
    """
    –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 'remote ' (–∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ),
    –∑–∞–º–µ–Ω—è–µ–º host –∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω) –ø–æ—Ä—Ç.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º (–Ω–æ–≤–∞—è_—Å—Ç—Ä–æ–∫–∞, —Å—Ç–∞—Ä—ã–π_host, —Å—Ç–∞—Ä—ã–π_port) –ª–∏–±–æ (line, None, None).
    """
    original = line
    stripped = line.lstrip()
    if not stripped.startswith("remote "):
        return original, None, None

    # –í–µ–¥—É—â–∏–µ –ø—Ä–æ–±–µ–ª—ã
    leading = line[:len(line) - len(stripped)]
    parts = stripped.split()
    if len(parts) < 3:
        return original, None, None  # –Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

    old_host = parts[1]
    old_port = parts[2]

    parts[1] = new_host
    if new_port is not None:
        parts[2] = str(new_port)

    new_line = leading + " ".join(parts)
    if not new_line.endswith("\n"):
        new_line += "\n"
    return new_line, old_host, old_port

def update_remote_in_file(path: str, new_host: str, new_port: Optional[int], ts: str):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–≤—É—é –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É remote –≤ —Ñ–∞–π–ª–µ.
    –î–µ–ª–∞–µ—Ç –±—ç–∫–∞–ø path.bak_<ts>. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
    """
    try:
        with open(path, "r") as f:
            lines = f.readlines()
    except Exception as e:
        return {"file": path, "error": f"read error: {e}"}

    changed = False
    old_host = old_port = None
    for i, line in enumerate(lines):
        if line.lstrip().startswith("remote "):
            new_line, oh, op = replace_remote_line(line, new_host, new_port)
            if oh is not None:
                # –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è (—Ç–æ—Ç –∂–µ host –∏ –ø–æ—Ä—Ç) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ –ø–ª–æ–¥–∏–º –±—ç–∫–∞–ø)
                if oh == new_host and ((new_port is None and op == op) or (new_port is not None and str(new_port) == op)):
                    break
                lines[i] = new_line
                old_host, old_port = oh, op
                changed = True
                break

    if not changed:
        return None

    backup_path = f"{path}.bak_{ts}"
    try:
        subprocess.run(f"cp '{path}' '{backup_path}'", shell=True, check=False)
        with open(path, "w") as f:
            f.writelines(lines)
        return {
            "file": path,
            "old_host": old_host,
            "old_port": old_port,
            "new_host": new_host,
            "new_port": new_port
        }
    except Exception as e:
        return {"file": path, "error": f"write error: {e}"}

def bulk_update_remote(new_host: str, new_port: Optional[int],
                       keys_dir=KEYS_DIR,
                       template_path=f"{OPENVPN_DIR}/client-template.txt"):
    ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    results = []
    for fname in os.listdir(keys_dir):
        if fname.endswith(".ovpn"):
            full = os.path.join(keys_dir, fname)
            r = update_remote_in_file(full, new_host, new_port, ts)
            if r:
                results.append(r)
    if os.path.exists(template_path):
        r = update_remote_in_file(template_path, new_host, new_port, ts)
        if r:
            results.append(r)
    return results

async def send_updated_ovpn_files(chat_id: int, bot, files: List[str]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö .ovpn —Ñ–∞–π–ª–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ—Ç–∏–≤ rate limit)."""
    import asyncio
    sent = 0
    for path in files:
        if not path.endswith(".ovpn"):
            continue
        if os.path.exists(path):
            try:
                with open(path, "rb") as f:
                    await bot.send_document(
                        chat_id=chat_id,
                        document=InputFile(f),
                        filename=os.path.basename(path)
                    )
                sent += 1
                await asyncio.sleep(0.3)  # –º–∏–∫—Ä–æ–ø–∞—É–∑a
            except Exception as e:
                print(f"[remote_send_all] error sending {path}: {e}")
    return sent

async def start_update_remote_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ö–Ω–æ–ø–∫–∞ "üåê –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å"
    q = update.callback_query
    await q.answer()
    context.user_data['await_new_remote'] = True
    await q.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ :–ø–æ—Ä—Ç).\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "  203.0.113.55\n"
        "  vpn.example.com:443\n"
        "–ï—Å–ª–∏ –ø–æ—Ä—Ç –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤ –∫–∞–∂–¥–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="cancel_update_remote")]])
    )

async def cancel_update_remote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop('await_new_remote', None)
    await update.callback_query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

async def process_new_remote_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    raw = update.message.text.strip()
    host, port = parse_new_remote(raw)
    if not host:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –º–µ–Ω—é.", reply_markup=get_main_keyboard())
        context.user_data.pop('await_new_remote', None)
        return

    results = bulk_update_remote(host, port)
    context.user_data.pop('await_new_remote', None)

    if not results:
        await update.message.reply_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ remote –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=get_main_keyboard())
        return

    updated = [r for r in results if 'error' not in r]
    errors = [r for r in results if 'error' in r]

    # –°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö .ovpn (–¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏)
    updated_ovpn_files = [r['file'] for r in updated if r['file'].endswith(".ovpn")]
    context.user_data['updated_remote_files'] = updated_ovpn_files

    lines = [
        f"<b>–ù–æ–≤—ã–π remote:</b> <code>{host}{':' + str(port) if port else ''}</code>",
        f"–ò–∑–º–µ–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(updated)}"
    ]
    sample = 0
    for r in updated:
        if sample < 5:
            oldp = f":{r['old_port']}" if r['old_port'] else ""
            newp = f":{r['new_port']}" if r['new_port'] else (f":{r['old_port']}" if r['old_port'] else "")
            lines.append(f"‚Ä¢ {os.path.basename(r['file'])}: {r['old_host']}{oldp} -> {r['new_host']}{newp}")
            sample += 1
    if len(updated) > sample:
        lines.append(f"... –µ—â—ë {len(updated)-sample} —Ñ–∞–π–ª–æ–≤")

    if errors:
        lines.append("\n–û—à–∏–±–∫–∏:")
        for e in errors[:3]:
            lines.append(f"‚Ä¢ {os.path.basename(e['file'])}: {e['error']}")
        if len(errors) > 3:
            lines.append(f"... –µ—â—ë {len(errors)-3} –æ—à–∏–±–æ–∫")

    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏", callback_data="remote_send_all")],
        [InlineKeyboardButton("‚ùå –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å", callback_data="remote_send_cancel")],
    ])

    await update.message.reply_text(
        "\n".join(lines) + "\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ .ovpn —Ñ–∞–π–ª—ã —Å—é–¥–∞?",
        parse_mode="HTML",
        reply_markup=kb
    )

### REMOTE UPDATE END
# ================== UI / HELP ==================

HELP_TEXT = f"""
<b>üìñ –ü–æ–º–æ—â—å –ø–æ VPN –ë–æ—Ç—É (–≤–µ—Ä—Å–∏—è {BOT_VERSION}):</b>

–§—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ / –û–Ω–ª–∞–π–Ω / –õ–æ–≥
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ / –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ (CCD)
‚Ä¢ –ë—ç–∫–∞–ø / –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
‚Ä¢ –¢—Ä–µ–≤–æ–≥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–Ω–ª–∞–π–Ω
‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ (üì∂ –¢—Ä–∞—Ñ–∏–∫ / /traffic)
‚Ä¢ –û—á–∏—Å—Ç–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ (üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫)
‚Ä¢ –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ remote –∞–¥—Ä–µ—Å–∞ (üåê –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å)
‚Ä¢ –í—ã–≤–æ–¥ –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ / /show_update_cmd)
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ ipp.txt (üõ£Ô∏è –¢—É–Ω–µ–ª—å)

–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
"""

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton("üîÑ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data='refresh')],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats'),
         InlineKeyboardButton("üü¢ –û–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç—ã", callback_data='online')],
        [InlineKeyboardButton("üì∂ –¢—Ä–∞—Ñ–∏–∫", callback_data='traffic'),
         InlineKeyboardButton("üîó –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", callback_data='update_info')],
        [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data='traffic_clear'),
         InlineKeyboardButton("üåê –û–±–Ω–æ–≤–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data='update_remote')],
        [InlineKeyboardButton("‚è≥ –°—Ä–æ–∫–∏ –∫–ª—é—á–µ–π", callback_data='keys_expiry'),
         InlineKeyboardButton("‚åõ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á", callback_data='renew_key')],
        [InlineKeyboardButton("‚úÖ –í–∫–ª.–∫–ª–∏–µ–Ω—Ç–∞", callback_data='enable'),
         InlineKeyboardButton("‚ö†Ô∏è –û—Ç–∫–ª.–∫–ª–∏–µ–Ω—Ç–∞", callback_data='disable')],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª—é—á", callback_data='create_key'),
         InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data='delete_key')],
        [InlineKeyboardButton("üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª—é—á–∏", callback_data='send_keys'),
         InlineKeyboardButton("üìú –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–∞", callback_data='log')],
        [InlineKeyboardButton("üì¶ –ë—ç–∫–∞–ø OpenVPN", callback_data='backup'),
         InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω.–±—ç–∫–∞–ø", callback_data='restore')],
        [InlineKeyboardButton("üö® –¢—Ä–µ–≤–æ–≥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data='block_alert')],
        [InlineKeyboardButton("üõ£Ô∏è –¢—É–Ω–µ–ª—å", callback_data='send_ipp')],
        [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data='help'),
         InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='home')],
    ]
    return InlineKeyboardMarkup(keyboard)

def get_keys_keyboard(keys):
    keyboard = []
    for i, fname in enumerate(keys, 1):
        keyboard.append([InlineKeyboardButton(f"{i}. {fname}", callback_data=f"key_{i}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='home')])
    return InlineKeyboardMarkup(keyboard)

def get_delete_keys_keyboard(keys):
    keyboard = []
    for i, fname in enumerate(keys, 1):
        keyboard.append([InlineKeyboardButton(f"{i}. {fname}", callback_data=f"delete_{fname}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='home')])
    return InlineKeyboardMarkup(keyboard)

def get_confirm_delete_keyboard(fname):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{fname}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")],
    ])

# ================== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è OVPN / –ö–ª—é—á–∏ ==================

def generate_ovpn_for_client(
    client_name,
    output_dir=KEYS_DIR,
    template_path=f"{OPENVPN_DIR}/client-template.txt",
    ca_path=f"{EASYRSA_DIR}/pki/ca.crt",
    cert_path=None,
    key_path=None,
    tls_crypt_path=f"{OPENVPN_DIR}/tls-crypt.key",
    tls_auth_path=f"{OPENVPN_DIR}/tls-auth.key",
    server_conf_path=f"{OPENVPN_DIR}/server.conf"
):
    if cert_path is None:
        cert_path = f"{EASYRSA_DIR}/pki/issued/{client_name}.crt"
    if key_path is None:
        key_path = f"{EASYRSA_DIR}/pki/private/{client_name}.key"

    ovpn_file = os.path.join(output_dir, f"{client_name}.ovpn")

    TLS_SIG = None
    if os.path.exists(server_conf_path):
        with open(server_conf_path, "r") as f:
            conf = f.read()
            if "tls-crypt" in conf:
                TLS_SIG = 1
            elif "tls-auth" in conf:
                TLS_SIG = 2

    with open(template_path, "r") as f:
        template_content = f.read()
    with open(ca_path, "r") as f:
        ca_content = f.read()
    with open(cert_path, "r") as f:
        cert_content = f.read()
    with open(key_path, "r") as f:
        key_content = f.read()

    ovpn_content = template_content + "\n"
    ovpn_content += "<ca>\n" + ca_content + "\n</ca>\n"
    ovpn_content += "<cert>\n" + cert_content + "\n</cert>\n"
    ovpn_content += "<key>\n" + key_content + "\n</key>\n"

    if TLS_SIG == 1 and os.path.exists(tls_crypt_path):
        with open(tls_crypt_path, "r") as f:
            tls_crypt_content = f.read()
        ovpn_content += "<tls-crypt>\n" + tls_crypt_content + "\n</tls-crypt>\n"
    elif TLS_SIG == 2 and os.path.exists(tls_auth_path):
        ovpn_content += "key-direction 1\n"
        with open(tls_auth_path, "r") as f:
            tls_auth_content = f.read()
        ovpn_content += "<tls-auth>\n" + tls_auth_content + "\n</tls-auth>\n"

    with open(ovpn_file, "w") as f:
        f.write(ovpn_content)
    return ovpn_file

# --- Create / Renew key handlers (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

async def create_key_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('await_key_name'):
        key_name = update.message.text.strip()
        ovpn_file = os.path.join(KEYS_DIR, f"{key_name}.ovpn")
        if os.path.exists(ovpn_file):
            await update.message.reply_text(
                f"–ö–ª–∏–µ–Ω—Ç <b>{key_name}</b> —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.",
                parse_mode="HTML"
            )
            return
        context.user_data['new_key_name'] = key_name
        context.user_data['await_key_name'] = False
        context.user_data['await_key_expiry'] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 825):")
        return

    if context.user_data.get('await_key_expiry'):
        try:
            days = int(update.message.text.strip())
        except:
            days = 825
        context.user_data['new_key_expiry'] = days
        context.user_data['await_key_expiry'] = False

        key_name = context.user_data['new_key_name']
        try:
            subprocess.run(
                f"EASYRSA_CERT_EXPIRE={days} {EASYRSA_DIR}/easyrsa --batch build-client-full {key_name} nopass",
                shell=True, check=True, cwd=EASYRSA_DIR
            )
        except subprocess.CalledProcessError as e:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}", parse_mode="HTML")
            context.user_data.clear()
            return

        ovpn_path = generate_ovpn_for_client(key_name)
        await update.message.reply_text(
            f"–ö–ª–∏–µ–Ω—Ç <b>{key_name}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π.\n–§–∞–π–ª: {ovpn_path}",
            parse_mode="HTML"
        )
        with open(ovpn_path, "rb") as f:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(f),
                filename=f"{key_name}.ovpn"
            )
        context.user_data.clear()
        return

async def renew_key_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keys = get_ovpn_files()
    if not keys:
        await update.callback_query.edit_message_text("–ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=get_main_keyboard())
        return
    keyboard = []
    for i, fname in enumerate(keys, 1):
        keyboard.append([InlineKeyboardButton(f"{i}. {fname[:-5]}", callback_data=f"renew_{fname}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='home')])
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def renew_key_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    fname = query.data.split('_', 1)[1]
    key_name = fname[:-5] if fname.endswith('.ovpn') else fname
    context.user_data['renew_key_name'] = key_name
    context.user_data['await_renew_expiry'] = True
    await query.edit_message_text(
        f"–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—Ä–æ–∫—É –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ <b>{key_name}</b>:",
        parse_mode="HTML"
    )

async def renew_key_expiry_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get('await_renew_expiry'):
        return
    key_name = context.user_data['renew_key_name']
    cert_path = f"{EASYRSA_DIR}/pki/issued/{key_name}.crt"
    key_path = f"{EASYRSA_DIR}/pki/private/{key_name}.key"
    req_path = f"{EASYRSA_DIR}/pki/reqs/{key_name}.req"
    if not os.path.exists(cert_path):
        await update.message.reply_text("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        context.user_data.clear()
        return
    try:
        days_to_add = int(update.message.text.strip())
    except:
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    with open(cert_path, "rb") as f:
        cert_data = f.read()
        cert = crypto.load_certificate(crypto.FILETYPE_PEM, cert_data)
        expiry_old = datetime.strptime(cert.get_notAfter().decode("ascii"), "%Y%m%d%H%M%SZ")

    new_expiry_date = expiry_old + timedelta(days=days_to_add)
    total_days = (new_expiry_date - datetime.utcnow()).days

    for p in [cert_path, key_path, req_path]:
        if os.path.exists(p):
            os.remove(p)

    try:
        subprocess.run(
            f"EASYRSA_CERT_EXPIRE={total_days} {EASYRSA_DIR}/easyrsa --batch build-client-full {key_name} nopass",
            shell=True, check=True, cwd=EASYRSA_DIR
        )
    except subprocess.CalledProcessError as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}", parse_mode="HTML")
        context.user_data.clear()
        return

    ovpn_path = generate_ovpn_for_client(key_name)
    await update.message.reply_text(
        f"–ö–ª—é—á <b>{key_name}</b> –æ–±–Ω–æ–≤–ª—ë–Ω!\n–ù–æ–≤—ã–π —Å—Ä–æ–∫: {total_days} –¥–Ω–µ–π.\n–§–∞–π–ª: {ovpn_path}",
        parse_mode="HTML"
    )
    with open(ovpn_path, "rb") as f:
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=InputFile(f),
            filename=f"{key_name}.ovpn"
        )
    context.user_data.clear()

# ================== –ü—Ä–æ—á–µ–µ (–ª–æ–≥, –±—ç–∫–∞–ø, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ) ==================

def get_status_log_tail(n=40):
    try:
        with open(STATUS_LOG, "r") as f:
            lines = f.readlines()
        return "".join(lines[-n:])
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è status.log: {e}"

def create_backup():
    backup_file = f"{BACKUP_DIR}/vpn_backup_{date.today().strftime('%Y%m%d')}.tar.gz"
    ovpn_files = [os.path.join(KEYS_DIR, f) for f in os.listdir(KEYS_DIR) if f.endswith(".ovpn")]
    files_to_backup = ovpn_files + [OPENVPN_DIR, IPTABLES_DIR]
    cmd = ["tar", "-czvf", backup_file] + files_to_backup
    subprocess.run(cmd)
    return backup_file

async def send_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    backup_file = create_backup()
    with open(backup_file, "rb") as f:
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=InputFile(f),
            filename=os.path.basename(backup_file)
        )

async def restore_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ (.tar.gz) —Å—é–¥–∞.")
    context.user_data['restore_wait_file'] = True

async def document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if context.user_data.get('restore_wait_file'):
        file = update.message.document
        if file and (
            file.mime_type in ['application/gzip', 'application/x-gzip', 'application/x-tar', 'application/octet-stream']
            or file.file_name.endswith(('.tar.gz', '.tgz', '.tar'))
        ):
            file_id = file.file_id
            file_name = file.file_name
            new_path = f"/root/{file_name}"
            new_file = await context.bot.get_file(file_id)
            await new_file.download_to_drive(new_path)
            context.user_data['restore_wait_file'] = False
            context.user_data['restore_file_path'] = new_path
            kb = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data='restore_confirm')],
                [InlineKeyboardButton("‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data='restore_cancel')],
            ])
            await update.message.reply_text(
                f"–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: <code>{file_name}</code>\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å?",
                parse_mode="HTML",
                reply_markup=kb
            )
        else:
            await update.message.reply_text("–ù—É–∂–µ–Ω –∞—Ä—Ö–∏–≤ .tar.gz")
    else:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–í–æ—Å—Å—Ç–∞–Ω.–±—ç–∫–∞–ø' –≤ –º–µ–Ω—é.")

async def restore_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file_path = context.user_data.get('restore_file_path')
    if file_path and os.path.exists(file_path):
        subprocess.run(f"tar -xzvf {file_path} -C /", shell=True)
        await update.callback_query.answer("–ì–æ—Ç–æ–≤–æ!")
        await update.callback_query.edit_message_text("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.", reply_markup=get_main_keyboard())
        context.user_data['restore_file_path'] = None
    else:
        await update.callback_query.answer("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_keyboard())

async def restore_cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['restore_file_path'] = None
    await update.callback_query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await update.callback_query.edit_message_text("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

# ================== –¢—Ä–∞—Ñ–∏–∫ —Ö–µ–Ω–¥–ª–µ—Ä—ã ==================

async def traffic_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    save_traffic_db(force=True)
    report = build_traffic_report()
    await update.message.reply_text(report, parse_mode="HTML", reply_markup=get_main_keyboard())

# ================== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (—Ü–∏–∫–ª) ==================

async def check_new_connections(app: Application):
    global clients_last_online, last_alert_time
    import asyncio
    while True:
        try:
            clients, online_names, tunnel_ips = parse_openvpn_status()
            update_traffic_from_status(clients)

            online_count = len(online_names)
            total_keys = len(get_ovpn_files())
            now = time.time()

            if online_count == 0 and total_keys > 0:
                if now - last_alert_time > ALERT_INTERVAL_SEC:
                    await app.bot.send_message(
                        chat_id=ADMIN_ID,
                        text="‚ùå –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã –æ—Ñ—Ñ–ª–∞–π–Ω! –í–æ–∑–º–æ–∂–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ IP –∏–ª–∏ –ø–∞–¥–µ–Ω–∏–µ OpenVPN.",
                        parse_mode="HTML"
                    )
                    last_alert_time = now
            elif 0 < online_count < MIN_ONLINE_ALERT:
                if now - last_alert_time > ALERT_INTERVAL_SEC:
                    await app.bot.send_message(
                        chat_id=ADMIN_ID,
                        text=f"‚ö†Ô∏è –û–Ω–ª–∞–π–Ω –º–∞–ª–æ: {online_count} –∏–∑ {total_keys}.",
                        parse_mode="HTML"
                    )
                    last_alert_time = now
            else:
                if online_count >= MIN_ONLINE_ALERT:
                    last_alert_time = 0

            clients_last_online = set(online_names)
            await asyncio.sleep(10)
        except Exception as e:
            print(f"[check_new_connections] –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞: {e}")
            await asyncio.sleep(10)

# ================== –ü—Ä–æ—á–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã ==================

async def universal_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    if context.user_data.get('await_key_name') or context.user_data.get('await_key_expiry'):
        await create_key_handler(update, context)
    elif context.user_data.get('await_renew_expiry'):
        await renew_key_expiry_handler(update, context)
    elif context.user_data.get('await_new_remote'):
        await process_new_remote_input(update, context)
    else:
        await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é.", reply_markup=get_main_keyboard())

async def enable_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    all_keys = get_ovpn_files()
    keyboard = []
    for fname in sorted(all_keys):
        cname = fname[:-5]
        if is_client_ccd_disabled(cname):
            keyboard.append([InlineKeyboardButton(f"‚úÖ –í–∫–ª—é—á–∏—Ç—å {cname}", callback_data=f"enable_{cname}")])
    if not keyboard:
        keyboard.append([InlineKeyboardButton("–ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="home")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def disable_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    all_keys = get_ovpn_files()
    keyboard = []
    for fname in sorted(all_keys):
        cname = fname[:-5]
        if not is_client_ccd_disabled(cname):
            keyboard.append([InlineKeyboardButton(f"‚ö†Ô∏è –û—Ç–∫–ª—é—á–∏—Ç—å {cname}", callback_data=f"disable_{cname}")])
    if not keyboard:
        keyboard.append([InlineKeyboardButton("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è", callback_data="home")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="home")])
    await query.edit_message_text("–í—ã–±–µ—Ä–∏ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard))

async def enable_client_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    cname = query.data.split('_', 1)[1]
    unblock_client_ccd(cname)
    await query.edit_message_text(f"–ö–ª–∏–µ–Ω—Ç <b>{cname}</b> –≤–∫–ª—é—á—ë–Ω.", parse_mode="HTML", reply_markup=get_main_keyboard())

async def disable_client_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    cname = query.data.split('_', 1)[1]
    block_client_ccd(cname)
    killed = kill_openvpn_session(cname)
    msg = f"–ö–ª–∏–µ–Ω—Ç <b>{cname}</b> –æ—Ç–∫–ª—é—á—ë–Ω."
    msg += "\n–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞." if killed else "\n–ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏."
    await query.edit_message_text(msg, parse_mode="HTML", reply_markup=get_main_keyboard())

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç! –í–µ—Ä—Å–∏—è: {BOT_VERSION}", reply_markup=get_main_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await update.message.reply_text(HELP_TEXT, parse_mode="HTML", reply_markup=get_main_keyboard())

async def clients_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    msg = format_clients_by_certs()
    await update.message.reply_text(msg, parse_mode="HTML", reply_markup=get_main_keyboard())

async def view_keys_expiry_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keys_info = get_cert_expiry_info()
    text = "<b>–°—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –∫–ª—é—á–µ–π:</b>\n"
    if not keys_info:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π."
    else:
        for client_name, days_left, expiry_date in sorted(keys_info):
            if days_left < 0:
                status = "‚ùå –∏—Å—Ç—ë–∫"
            elif days_left < 7:
                status = f"‚ö†Ô∏è {days_left} –¥–Ω–µ–π"
            else:
                status = f"{days_left} –¥–Ω–µ–π"
            text += f"‚Ä¢ <b>{client_name}</b>: {status} (–¥–æ {expiry_date.strftime('%Y-%m-%d')})\n"
    if update.callback_query:
        await update.callback_query.edit_message_text(text, parse_mode="HTML", reply_markup=get_main_keyboard())
    else:
        await update.message.reply_text(text, parse_mode="HTML", reply_markup=get_main_keyboard())

async def online_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    clients, online_names, tunnel_ips = parse_openvpn_status()
    res = []
    for c in clients:
        if c['name'] in online_names and not is_client_ccd_disabled(c['name']):
            tunnel_ip = tunnel_ips.get(c['name'], '–Ω–µ—Ç')
            res.append(
                f"üü¢ <b>{c['name']}</b>\n"
                f"üåê <code>{c.get('ip','–Ω–µ—Ç')}</code>\n"
                f"üõ°Ô∏è Tunnel: <code>{tunnel_ip}</code>\n"
                f"üì• {bytes_to_mb(c.get('bytes_recv',0))} | üì§ {bytes_to_mb(c.get('bytes_sent',0))}\n"
                f"üïí {format_tm_time(c.get('connected_since',''))}\n"
                + "-"*15
            )
    text = "<b>–û–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç—ã:</b>\n\n" + ("\n".join(res) if res else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")
    await update.message.reply_text(text, parse_mode="HTML", reply_markup=get_main_keyboard())

async def log_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    log_text = get_status_log_tail()
    msgs = split_message(f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ status.log:</b>\n\n<pre>{log_text}</pre>", 4000)
    await query.edit_message_text(msgs[0], parse_mode="HTML", reply_markup=get_main_keyboard())
    for msg in msgs[1:]:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=msg, parse_mode="HTML")

async def send_keys_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    keys = get_ovpn_files()
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:", reply_markup=get_keys_keyboard(keys))

async def send_ovpn_file(update: Update, context: ContextTypes.DEFAULT_TYPE, filename):
    file_path = os.path.join(KEYS_DIR, filename)
    if not os.path.exists(file_path):
        if update.callback_query:
            await update.callback_query.edit_message_text(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω!", reply_markup=get_main_keyboard())
        return
    with open(file_path, "rb") as f:
        await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(f), filename=filename)

async def delete_key_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keys = get_ovpn_files()
    if not keys:
        await update.callback_query.edit_message_text("–ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_main_keyboard())
        return
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_delete_keys_keyboard(keys))

async def ask_key_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, vpnuser1):")
    context.user_data['await_key_name'] = True

async def delete_key_select_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    fname = query.data.split('_', 1)[1]
    await query.edit_message_text(
        f"–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á <b>{fname}</b>? –≠—Ç–æ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        parse_mode="HTML",
        reply_markup=get_confirm_delete_keyboard(fname)
    )

async def delete_key_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    fname = query.data.split('_', 2)[2]
    client_name = fname[:-5] if fname.endswith(".ovpn") else fname
    try:
        kill_openvpn_session(client_name)
        subprocess.run(f"cd {EASYRSA_DIR} && ./easyrsa --batch revoke {client_name}", shell=True, check=True)
        subprocess.run(f"cd {EASYRSA_DIR} && EASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl", shell=True, check=True)
        crl_src = f"{EASYRSA_DIR}/pki/crl.pem"
        crl_dst = "/etc/openvpn/crl.pem"
        if os.path.exists(crl_src):
            subprocess.run(f"cp {crl_src} {crl_dst}", shell=True, check=True)
            os.chmod(crl_dst, 0o644)
        paths = [
            os.path.join(KEYS_DIR, fname),
            f"{EASYRSA_DIR}/pki/issued/{client_name}.crt",
            f"{EASYRSA_DIR}/pki/private/{client_name}.key",
            f"{EASYRSA_DIR}/pki/reqs/{client_name}.req",
            os.path.join(CCD_DIR, client_name)
        ]
        for p in paths:
            if os.path.exists(p):
                os.remove(p)
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}", reply_markup=get_main_keyboard())
        return
    await query.edit_message_text(f"–ö–ª—é—á <b>{fname}</b> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML", reply_markup=get_main_keyboard())

async def delete_key_cancel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.edit_message_text("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_keyboard())

# ================== Button Handler ==================

def format_online_clients(clients, online_names, tunnel_ips):
    res = []
    for c in clients:
        if c['name'] in online_names and not is_client_ccd_disabled(c['name']):
            tunnel_ip = tunnel_ips.get(c['name'], '–Ω–µ—Ç')
            res.append(
                f"üü¢ <b>{c['name']}</b>\n"
                f"üåê <code>{c.get('ip','–Ω–µ—Ç')}</code>\n"
                f"üõ°Ô∏è <b>Tunnel:</b> <code>{tunnel_ip}</code>\n"
                f"üì• {bytes_to_mb(c.get('bytes_recv',0))} | üì§ {bytes_to_mb(c.get('bytes_sent',0))}\n"
                f"üïí {format_tm_time(c.get('connected_since',''))}\n"
                + "-"*15
            )
    return "<b>–û–Ω–ª–∞–π–Ω –∫–ª–∏–µ–Ω—Ç—ã:</b>\n\n" + ("\n".join(res) if res else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query.from_user.id != ADMIN_ID:
        await query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return
    await query.answer()
    data = query.data

    if data == 'refresh':
        msg = format_clients_by_certs()
        await query.edit_message_text(msg, parse_mode="HTML", reply_markup=get_main_keyboard())

    elif data == 'renew_key':
        await renew_key_request(update, context)
    elif data.startswith('renew_'):
        await renew_key_select_handler(update, context)

    elif data == 'stats':
        clients, online_names, tunnel_ips = parse_openvpn_status()
        ipp_map = read_ipp_file("/etc/openvpn/ipp.txt")
        message = format_all_keys_with_status_compact(KEYS_DIR, online_names, clients, tunnel_ips, ipp_map)
        msgs = split_message(message)
        await query.edit_message_text(msgs[0], parse_mode="HTML", reply_markup=get_main_keyboard())
        for msg in msgs[1:]:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=msg, parse_mode="HTML")

    elif data == 'online':
        clients, online_names, tunnel_ips = parse_openvpn_status()
        text = format_online_clients(clients, online_names, tunnel_ips)
        msgs = split_message(text)
        await query.edit_message_text(msgs[0], parse_mode="HTML", reply_markup=get_main_keyboard())
        for m in msgs[1:]:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=m, parse_mode="HTML")

    elif data == 'traffic':
        save_traffic_db(force=True)
        report = build_traffic_report()
        await query.edit_message_text(report, parse_mode="HTML", reply_markup=get_main_keyboard())

    elif data == 'traffic_clear':
        kb = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="confirm_clear_traffic")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_traffic")],
        ])
        await query.edit_message_text(
            "–û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫? –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø —Ñ–∞–π–ª–∞ traffic_usage.json.*",
            reply_markup=kb
        )
    elif data == 'confirm_clear_traffic':
        clear_traffic_stats()
        await query.edit_message_text("‚úÖ –¢—Ä–∞—Ñ–∏–∫ –æ—á–∏—â–µ–Ω.", reply_markup=get_main_keyboard())
    elif data == 'cancel_clear_traffic':
        await query.edit_message_text("–û—Ç–º–µ–Ω–µ–Ω–æ. –¢—Ä–∞—Ñ–∏–∫ –Ω–µ –∏–∑–º–µ–Ω—ë–Ω.", reply_markup=get_main_keyboard())

    elif data == 'update_remote':
        await start_update_remote_flow(update, context)
    elif data == 'cancel_update_remote':
        await cancel_update_remote(update, context)

    elif data == 'remote_send_all':
        files = context.user_data.pop('updated_remote_files', [])
        if not files:
            await query.edit_message_text("–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—É—Å—Ç –∏–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=get_main_keyboard())
            return
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª—è—é –∫–ª—é—á–∏...", reply_markup=get_main_keyboard())
        sent = await send_updated_ovpn_files(update.effective_chat.id, context.bot, files)
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {sent}",
            reply_markup=get_main_keyboard()
        )

    elif data == 'remote_send_cancel':
        context.user_data.pop('updated_remote_files', None)
        await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())

    elif data == 'update_info':
        await send_update_cmd_via_button(update.effective_chat.id, context.bot)

    elif data == 'keys_expiry':
        await view_keys_expiry_handler(update, context)
        
    elif data == 'send_ipp':
    ipp_path = "/etc/openvpn/ipp.txt"
    if os.path.exists(ipp_path):
        with open(ipp_path, "rb") as f:
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=InputFile(f),
                filename="ipp.txt"
            )
        await query.edit_message_text("–§–∞–π–ª ipp.txt –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.", reply_markup=get_main_keyboard())
    else:
        await query.edit_message_text("–§–∞–π–ª ipp.txt –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_keyboard())    

    elif data == 'help':
        msgs = split_message(HELP_TEXT)
        await query.edit_message_text(msgs[0], parse_mode="HTML", reply_markup=get_main_keyboard())
        for m in msgs[1:]:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=m, parse_mode="HTML")

    elif data == 'restore_confirm':
        await restore_confirm_handler(update, context)
    elif data == 'restore_cancel':
        await restore_cancel_handler(update, context)

    elif data == 'send_keys':
        keys = get_ovpn_files()
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á:", reply_markup=get_keys_keyboard(keys))

    elif data.startswith('key_'):
        idx = int(data.split('_')[1]) - 1
        keys = get_ovpn_files()
        if 0 <= idx < len(keys):
            await send_ovpn_file(update, context, keys[idx])

    elif data == 'delete_key':
        await delete_key_request(update, context)

    elif data.startswith('delete_'):
        await delete_key_select_handler(update, context)

    elif data.startswith('confirm_delete_'):
        await delete_key_confirm_handler(update, context)

    elif data == 'cancel_delete':
        await delete_key_cancel_handler(update, context)

    elif data == 'create_key':
        await ask_key_name(update, context)

    elif data == 'backup':
        await send_backup(update, context)

    elif data == 'restore':
        await restore_request(update, context)

    elif data == 'home':
        await query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VPN –±–æ—Ç!", reply_markup=get_main_keyboard())

    elif data == 'enable':
        await enable_request(update, context)
    elif data.startswith('enable_'):
        await enable_client_handler(update, context)

    elif data == 'disable':
        await disable_request(update, context)
    elif data.startswith('disable_'):
        await disable_client_handler(update, context)

    elif data == 'log':
        await log_request(update, context)

    elif data == 'block_alert':
        await query.edit_message_text(
            "–¢—Ä–µ–≤–æ–≥–∞ –∞–∫—Ç–∏–≤–Ω–∞ –≤ —Ñ–æ–Ω–µ.\n"
            f"–ü–æ—Ä–æ–≥: < {MIN_ONLINE_ALERT}, –∞–Ω—Ç–∏—Å–ø–∞–º: {ALERT_INTERVAL_SEC}s.",
            reply_markup=get_main_keyboard()
        )
    else:
        await query.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.", reply_markup=get_main_keyboard())

# ================== MAIN ==================

def main():
    app = Application.builder().token(TOKEN).build()

    load_traffic_db()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("clients", clients_command))
    app.add_handler(CommandHandler("online", online_command))
    app.add_handler(CommandHandler("traffic", traffic_command))
    app.add_handler(CommandHandler("show_update_cmd", show_update_cmd))
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è remote –ø–æ–∑–∂–µ

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_text_handler))
    app.add_handler(MessageHandler(filters.Document.ALL, document_handler))
    app.add_handler(CallbackQueryHandler(button_handler))

    import asyncio
    loop = asyncio.get_event_loop()
    loop.create_task(check_new_connections(app))

    app.run_polling()

if __name__ == '__main__':
    main()